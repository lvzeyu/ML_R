}
labels<-data.frame(labels)
values_to_na <- c("非該当", "無回答", "わからない")
na_values <- labels[rownames(labels) %in% values_to_na, ]
variable[variable%in%na_values] <- NA
return(variable)
}
PY100 <- read_dta("Data/PY100/PY100.dta")
PY100$ZQ50
PY100%>%
subset(ZQ50==1)
unmarriage<-PY100%>%
subset(ZQ50==1)
PY100$IQ45
library(tidyverse)
unmarriage$IQ45
unmarriage$marriage_status<-recode(unmarriage$IQ45, "2"="0","3"="0","4"="0")
unmarriage$marriage_status
unmarriage$marriage_status<-recode(unmarriage$IQ45,"1"="1" "2"="0","3"="0","4"="0")
unmarriage$marriage_status<-recode(unmarriage$IQ45,"1"="1", "2"="0","3"="0","4"="0")
unmarriage$marriage_status
unmarriage%>%
select(2:211)
a<-unmarriage%>%
select(2:211)
unmarriage%>%
select(2:211,295:430,509:537)
wave1<-unmarriage%>%
select(2:211,295:430,509:537)
wave1
unmarriage$ZQ55_1
for (colname in colnames(wave1)) {
wave1[[colname]] <- convert_labels_to_na(wave1[[colname]])
}
wave1
wave1$zq02dz48
wave1$JC_7A
wave1 <- wave1 %>%
mutate_all(~ifelse(is.na(.), mean(., na.rm = TRUE), .))
wave1
wave1
wave1["marriage_status"]<-unmarriage$IQ45
wave1
table(wave1$IQ45)
table(wave1$marriage_status)
unmarriage<-PY100%>%
subset(ZQ50==1)
unmarriage$marriage_status<-recode(unmarriage$IQ45,"1"="1", "2"="0","3"="0","4"="0")
wave1<-unmarriage%>%
select(2:211,295:430,509:537)
unmarriage<-PY100%>%
subset(ZQ50==1)
wave1<-unmarriage%>%
select(2:211,295:430,509:537)
wave1["marriage_status"]<-unmarriage$IQ45
for (colname in colnames(wave1)) {
wave1[[colname]] <- convert_labels_to_na(wave1[[colname]])
}
wave1 <- wave1 %>%
mutate_all(~ifelse(is.na(.), mean(., na.rm = TRUE), .))
unmarriage<-PY100%>%
subset(ZQ50==1)
wave1<-unmarriage%>%
select(2:211,295:430,509:537)
wave1["marriage_status"]<-unmarriage$IQ45
for (colname in colnames(wave1)) {
wave1[[colname]] <- convert_labels_to_na(wave1[[colname]])
}
table(wave1$marriage_status)
unmarriage$IQ45
wave1$marriage_status<-ifelse(wave1$marriage_status==2,0,1)
wave1
table(wave1$marriage_status)
wave1
wave1 <- wave1 %>%
mutate_all(~ifelse(is.na(.), mean(., na.rm = TRUE), .))
wave1
library(haven)
library(labelled)
library(tidyverse)
convert_labels_to_na <- function(variable) {
labels <- labelled::get_value_labels(variable)
# Check if variable is labelled
if (is.null(labels)) {
return(variable)
}
labels<-data.frame(labels)
values_to_na <- c("非該当", "無回答", "わからない")
na_values <- labels[rownames(labels) %in% values_to_na, ]
variable[variable%in%na_values] <- NA
return(variable)
}
PY100 <- read_dta("Data/PY100/PY100.dta")
unmarriage<-PY100%>%
subset(ZQ50==1)
wave1<-unmarriage%>%
select(2:211,295:430,509:537)
wave1["marriage_status"]<-unmarriage$IQ45
for (colname in colnames(wave1)) {
wave1[[colname]] <- convert_labels_to_na(wave1[[colname]])
}
wave1$marriage_status<-ifelse(wave1$marriage_status==2,0,1)
table(wave1$marriage_status)
wave1
wave1%>%
drop_na("marriage_status")
wave1<-wave1%>%
drop_na("marriage_status")
wave1 <- wave1 %>%
mutate_all(~ifelse(is.na(.), mean(., na.rm = TRUE), .))
wave1
library(parship)
library(parsnip)
install.packages("tidymodels")
install.packages("parsnip")
install.packages("parsnip")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(parsnip)
library("parsnip")
library(haven)
library(labelled)
library(tidyverse)
library("parsnip")
convert_labels_to_na <- function(variable) {
labels <- labelled::get_value_labels(variable)
# Check if variable is labelled
if (is.null(labels)) {
return(variable)
}
labels<-data.frame(labels)
values_to_na <- c("非該当", "無回答", "わからない")
na_values <- labels[rownames(labels) %in% values_to_na, ]
variable[variable%in%na_values] <- NA
return(variable)
}
PY100 <- read_dta("Data/PY100/PY100.dta")
unmarriage<-PY100%>%
subset(ZQ50==1)
wave1<-unmarriage%>%
select(2:211,295:430,509:537)
wave1["marriage_status"]<-unmarriage$IQ45
for (colname in colnames(wave1)) {
wave1[[colname]] <- convert_labels_to_na(wave1[[colname]])
}
wave1$marriage_status<-ifelse(wave1$marriage_status==2,0,1)
wave1<-wave1%>%
drop_na("marriage_status")
wave1 <- wave1 %>%
mutate_all(~ifelse(is.na(.), mean(., na.rm = TRUE), .))
table(wave1$marriage_status)
wave1
rand_forest(mode = "classification", trees = 2000)
rand_forest(mode = "classification", trees = 2000)%>%
fit(marriage_status~.,data=wave1)
install.packages('ranger')
rand_forest(mode = "classification", trees = 2000)%>%
fit(marriage_status~.,data=wave1)
wave1$marriage_status<-as.factor(wave1$marriage_status)
rand_forest(mode = "classification", trees = 2000)%>%
fit(marriage_status~.,data=wave1)
xgboost_model <-
parsnip::boost_tree(
mode = "regression",
trees = 1000,
min_n = tune(),
tree_depth = tune(),
learn_rate = tune(),
loss_reduction = tune()
) %>%
set_engine("xgboost", objective = "reg:squarederror")
xgboost_model <-
parsnip::boost_tree(
mode = "regression",
trees = 1000,
min_n = tune(),
tree_depth = tune(),
learn_rate = tune(),
loss_reduction = tune()
) %>%
set_engine("xgboost") %>%
set_mode("classification") %>%
translate()
xgboost_model%>%
fit(marriage_status~.,data=wave1)
install.packages('xgboost')
xgboost_model%>%
fit(marriage_status~.,data=wave1)
wave1
xgboost_model%>%
fit(marriage_status~mbirth+ZQ02A+zq02ay48+zq02az48+ZQ02B+zq02by48+zq02bz48+ZQ02C,data=wave1)
wave1$marriage_status<-as.numeric(wave1$marriage_status)
xgboost_model%>%
fit(marriage_status~mbirth+ZQ02A+zq02ay48+zq02az48+ZQ02B+zq02by48+zq02bz48+ZQ02C,data=wave1)
wave1$marriage_status<-as.numeric(wave1$marriage_status)
xgboost_model%>%
fit(marriage_status~mbirth+ZQ02A+zq02ay48+zq02az48+ZQ02B+zq02by48+zq02bz48+ZQ02C,data=wave1)
wave1$marriage_status<-as.factor(wave1$marriage_status)
xgboost_model%>%
fit(marriage_status~mbirth+ZQ02A+zq02ay48+zq02az48+ZQ02B+zq02by48+zq02bz48+ZQ02C,data=wave1)
xgboost_model%>%
fit(marriage_status~mbirth,data=wave1)
wave1
wave1$marriage_status
length(wave1$marriage_status)
length(wave1)
nrow(wave1)
install.packages("neuralnet ")
install.packages("neuralnet")
library("neuralnet")
m<- neuralnet(marriage_status~., data= wave1,
hidden = 3, act.fct = "logistic")
m<- neuralnet(marriage_status~mbirth+ZQ02A+zq02ay48+zq02az48+ZQ02B+zq02by48+zq02bz48+ZQ02C, data= wave1,
hidden = 3, act.fct = "logistic")
m<- neuralnet(marriage_status~mbirth+ZQ02A+zq02ay48+zq02az48+ZQ02B+zq02by48+zq02bz48+ZQ02C, data= wave1[:800],
m<- neuralnet(marriage_status~mbirth+ZQ02A+zq02ay48+zq02az48+ZQ02B+zq02by48+zq02bz48+ZQ02C, data= wave1[:800,],
m<- neuralnet(marriage_status~mbirth+ZQ02A+zq02ay48+zq02az48+ZQ02B+zq02by48+zq02bz48+ZQ02C, data= wave1[1:800,],
hidden = 3, act.fct = "logistic")
wave1[1:800,]
model_results<-compute(m,data= wave1[800:,])
model_results<-compute(m,data= wave1[800:1000,])
wave1[800:1000,]
model_results<-compute(m,wave1[800:1000,])
predicted_strength<-model_results$net.result
predicted_strength
cpr(predicted_strength,wave1$marriage_status)
cor(predicted_strength,wave1$marriage_status)
#--------------
wave1$marriage_status<-as.numeric(wave1$marriage_status)
cor(predicted_strength,wave1$marriage_status)
wave1
lm_model <-
linear_reg() %>%
set_engine("lm")
lm_form_fit <-
lm_model %>%
# Recall that Sale_Price has been pre-logged
fit(marriage_status~mbirth+ZQ02A+zq02ay48+zq02az48+ZQ02B+zq02by48+zq02bz48+ZQ02C,data=wave1)
lm_form_fit
rand_forest(trees = 1000, min_n = 5) %>%
set_engine("ranger") %>%
set_mode("regression") %>%
translate()
rf_spec = rand_forest() %>%
set_engine("ranger") %>%
set_mode("classification")
rf_recipe = recipe(marriage_status~mbirth+ZQ02A+zq02ay48+zq02az48+ZQ02B+zq02by48+zq02bz48+ZQ02C,data=wave1) %>%
step_dummy(marriage_status, -marriage_status)
library(modeldata)
library(skimr)
rf_recipe = recipe(marriage_status~mbirth+ZQ02A+zq02ay48+zq02az48+ZQ02B+zq02by48+zq02bz48+ZQ02C,data=wave1) %>%
step_dummy(marriage_status, -marriage_status)
workflow() %>%
add_model(rf_spec) %>%
fit(data = cells)
library(tidymodels)
workflow() %>%
add_model(rf_spec) %>%
fit(data = wave1)
rf_recipe = recipe(marriage_status~mbirth+ZQ02A+zq02ay48+zq02az48+ZQ02B+zq02by48+zq02bz48+ZQ02C,data=wave1) %>%
step_dummy(marriage_status, -marriage_status)
workflow() %>%
add_recipe(rf_recipe) %>%
add_model(rf_spec) %>%
fit(data = wave1)
wave1$marriage_status<-as.factor(wave1$marriage_status)
workflow() %>%
add_recipe(rf_recipe) %>%
add_model(rf_spec) %>%
fit(data = wave1)
workflow() %>%
add_recipe(rf_recipe) %>%
add_model(rf_spec) %>%
fit(data = wave1[1:800,])
rf_recipe = recipe(marriage_status~.,data=wave1) %>%
step_dummy(marriage_status, -marriage_status)
workflow() %>%
add_recipe(rf_recipe) %>%
add_model(rf_spec) %>%
fit(data = wave1[1:800,])
rf_recipe = recipe(marriage_status~mbirth+ZQ02A+zq02ay48+zq02az48+ZQ02B+zq02by48+zq02bz48+ZQ02C,data=wave1) %>%
step_dummy(marriage_status, -marriage_status)
workflow() %>%
add_recipe(rf_recipe) %>%
add_model(rf_spec) %>%
fit(data = wave1[1:800,])
mod<-workflow() %>%
add_recipe(rf_recipe) %>%
add_model(rf_spec) %>%
fit(data = wave1[1:800,])
mod
tres<- predict(mod,new_data =wave1[800:1000,] )
tres
tres
wave1[800:1000,]$marriage_status
metrics(tres,wave1[800:1000,]$marriage_status)
precision(estimate=tres,truth=wave1[800:1000,]$marriage_status)
precision(tres,estimate=tres,truth=wave1[800:1000,]$marriage_status)
tres<- predict(mod,new_data =wave1[800:1000,] )%>%
bind_cols(wave1[800:1000,])
tres
precision(tres,estimate=.pred_class,truth=marriage_status)
rf_recipe = recipe(marriage_status~.,data=wave1) %>%
step_dummy(marriage_status, -marriage_status)
mod<-workflow() %>%
add_recipe(rf_recipe) %>%
add_model(rf_spec) %>%
fit(data = wave1[1:800,])
wave1$ZQ30B
library(haven)
library(labelled)
library(tidyverse)
library("parsnip")
library("neuralnet")
library(modeldata)
library(skimr)
library(tidymodels)
convert_labels_to_na <- function(variable) {
labels <- labelled::get_value_labels(variable)
# Check if variable is labelled
if (is.null(labels)) {
return(variable)
}
labels<-data.frame(labels)
values_to_na <- c("非該当", "無回答", "わからない")
na_values <- labels[rownames(labels) %in% values_to_na, ]
variable[variable%in%na_values] <- NA
return(variable)
}
PY100 <- read_dta("Data/PY100/PY100.dta")
unmarriage<-PY100%>%
subset(ZQ50==1)
wave1<-unmarriage%>%
select(2:211,295:430,509:537)
wave1["marriage_status"]<-unmarriage$IQ45
for (colname in colnames(wave1)) {
wave1[[colname]] <- convert_labels_to_na(wave1[[colname]])
}
wave1$marriage_status<-ifelse(wave1$marriage_status==2,0,1)
wave1<-wave1%>%
drop_na("marriage_status")
wave1 <- wave1[, apply(wave1, 2, function(x) sum(is.na(x)) <= 500)]
wave1 <- wave1 %>%
mutate_all(~ifelse(is.na(.), mean(., na.rm = TRUE), .))
wave1$marriage_status<-as.factor(wave1$marriage_status)
rf_spec = rand_forest() %>%
set_engine("ranger") %>%
set_mode("classification")
wave1$ZQ30B
rf_recipe = recipe(marriage_status~.,data=wave1) %>%
step_dummy(marriage_status, -marriage_status)
mod<-workflow() %>%
add_recipe(rf_recipe) %>%
add_model(rf_spec) %>%
fit(data = wave1[1:800,])
tres<- predict(mod,new_data =wave1[800:1000,] )%>%
bind_cols(wave1[800:1000,])
tres$.pred_class
precision(tres,estimate=.pred_class,truth=marriage_status)
train<-wave1[1:800,]
train<-wave1[1:800,]
test<-wave1[800:nrow(wave1),]
rf_spec = rand_forest() %>%
set_engine("ranger") %>%
set_mode("classification")
xgb_spec <- boost_tree() %>%
set_mode("classification") %>%
set_engine("xgboost")
knn_spec <- nearest_neighbor(neighbors = 5) %>%
set_mode("classification") %>%
set_engine("kknn")
nn_spec <- mlp(hidden_units = 10) %>%
set_mode("classification") %>%
set_engine("keras")
rec = recipe(marriage_status~.,data=wave1) %>%
step_dummy(marriage_status, -marriage_status)
mod<-workflow() %>%
add_recipe(rf_recipe) %>%
add_model(rf_spec) %>%
fit(data = wave1[1:800,])
xgb_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(xgb_spec)
rf_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(rf_spec)
knn_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(knn_spec)
nn_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(nn_spec)
xgb_fit <- xgb_wf %>%
fit(data = train)
rf_fit <- rf_wf %>%
fit(data = train)
knn_fit <- knn_wf %>%
fit(data = train)
install.packages('kknn')
nn_fit <- nn_wf %>%
fit(data = train)
install.packages("keras")
library(keras)
install_keras()
nn_fit <- nn_wf %>%
fit(data = train)
xgb_res <- predict(xgb_fit, penguins_test) %>%
bind_cols(penguins_test) %>%
metrics(truth = species, estimate = .pred_class)
xgb_res <- predict(xgb_fit, test) %>%
bind_cols(test) %>%
metrics(truth = marriage_status, estimate = .pred_class)
rf_res <- predict(rf_fit, test) %>%
bind_cols(test) %>%
metrics(truth = marriage_status, estimate = .pred_class)
xgb_res
rf_res
install.packages("fastshap")
predict_func <- function(model, newdata) {
predict(model, data = newdata, type = "response")$predictions
}
explainer <- Shapley$new(predict_func, rf_model, test, y = test$marriage_status)
remotes::install_github("bgreenwell/fastshap")
remotes::install_github("bgreenwell/fastshap")
2
remotes::install_github("bgreenwell/fastshap")
2
remotes::install_github("bgreenwell/fastshap")
remotes::install_github("bgreenwell/fastshap")
install.packages("iml")
library(iml)
predictor <- Predictor$new(rf_spec, data = test, y = test$marriage_status, type = "prob")
# Compute SHAP values
shapley <- Shapley$new(predictor)
shapley_results <- shapley$explain()
shapley
predictor
rf_spec
trained_rf <- pull_workflow_fit(rf_fit)$fit
trained_rf <- extract_fit_parsnip(rf_fit)$fit
trained_rf
predictor <- Predictor$new(trained_rf, data = wave1, y = wave1$marriage_status, type = "prob")
predictor
shapley <- Shapley$new(predictor)
shapley_results <- shapley$explain()
shapley
wave1_predictors <- wave1 %>%
select(-marriage_status)
predictor <- Predictor$new(trained_rf, data = wave1_predictors, y = wave1$marriage_status, type = "prob")
shapley <- Shapley$new(predictor)
shapley_results <- shapley$explain()
predictor <- Predictor$new(trained_rf, data = wave1_predictors, y = wave1$marriage_status, type = "class")
shapley <- Shapley$new(predictor)
shapley_results <- shapley$explain()
library(iml)
# Create the Predictor object
predictor <- Predictor$new(
model = trained_rf,
data = wave1_predictors,
y = wave1$marriage_status,
type = "class"
)
predictor
trained_rf
# Create the Predictor object
predictor <- Predictor$new(
model = rf_fit,
data = wave1_predictors,
y = wave1$marriage_status,
type = "class"
)
predictor
shapley <- Shapley$new(predictor)
shapley_results <- shapley$explain()
library(shapviz)
install.packages("shapviz")
library(tidyverse)
library(tidymodels)
library(shapviz)
# Integer encode factors
dia_recipe <- diamonds %>%
recipe(price ~ carat + cut + clarity + color) %>%
step_integer(all_nominal())
# Will explain THIS dataset later
set.seed(2)
dia_small <- diamonds[sample(nrow(diamonds), 1000), ]
dia_small_prep <- bake(
prep(dia_recipe),
has_role("predictor"),
new_data = dia_small,
composition = "matrix"
)
dia_small
dia_small_prep
dia_small_prep
shap <- shapviz(extract_fit_parsnip(rf_fit), X_pred = wave1_predictors, X = wave1)
shap <- shapviz(extract_fit_parsnip(rf_fit), X_pred = wave1_predictors, X = wave1_predictors)
bake(
prep(rec)
dia_small_prep <- bake(
dia_small_prep <- bake(
prep(rec),
has_role("marriage_status"),
new_data = wave1_predictors,
composition = "matrix"
)
dia_small_prep
shap <- shapviz(extract_fit_parsnip(rf_fit), X_pred = dia_small_prep, X = wave1_predictors)
extract_fit_parsnip(rf_fit)
shap <- shapviz(extract_fit_parsnip(xgb_fit), X_pred = dia_small_prep, X = wave1_predictors)
